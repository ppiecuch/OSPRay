// ======================================================================== //
// Copyright 2009-2016 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "embree2/rtcore.isph"

#include "OSPConfig.h"

typedef unsigned int64 uint64;
typedef unsigned int32 uint32;
typedef unsigned int16 uint16;
typedef unsigned int8  uint8;

#define LOG(x)

#if defined(__MIC__)
inline void* uniform align_ptr(void* uniform ptr) {
  return (void* uniform) ((((uniform int64)ptr) + 63) & (-64));
}
#elif defined(__AVX__)
inline void* uniform align_ptr(void* uniform ptr) {
  return (void* uniform) ((((uniform int64)ptr) + 31) & (-32));
}
#else
inline void* uniform align_ptr(void* uniform ptr) {
  return (void* uniform) ((((uniform int64)ptr) + 15) & (-16));
}
#endif

#define PRINT(x) print(#x" = %\n", x)
// prints first unmasked element
#define PRINT0(x) print(#x"[%] = %\n", count_trailing_zeros(lanemask()), extract(x, count_trailing_zeros(lanemask())))

/*! ispc copy of embree error handling callback */
void error_handler(const RTCError code, const int8* str);


/*! a C++-callable 'delete' of ISPC-side allocated memory of uniform objects */
export void delete_uniform(void *uniform uptr);

/*! 64-bit malloc. allows for alloc'ing memory larger than 64 bits */
extern "C" void *uniform malloc64(uniform uint64 size);
extern "C" void free64(void *uniform ptr);
